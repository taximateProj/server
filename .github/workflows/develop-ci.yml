name: Develop Branch CI

on:
  push:
    branches:
      - develop
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches:
      - develop
    paths-ignore:
      - '**/*.md'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 리포지토리 checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.GH_TOKEN }}
        # 리포지토리를 서브모듈 포함해서 checkout

      - name: JDK 17 설정
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
        # JDK 17 설정

      - name: Gradle 캐시 복원
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-
        # Gradle 종속성 캐시 복원으로 빌드 시간 단축

      - name: Gradle 실행 권한 부여
        run: chmod +x ./gradlew
        # Gradle 스크립트 실행 권한 부여

      - name: Gradle 빌드 및 테스트
        run: ./gradlew clean build
        # Gradle 빌드 및 테스트 실행

      - name: 테스트 결과 업로드
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: build/test-results
        # 테스트 결과를 아티팩트로 업로드

      - name: 빌드 아티팩트 업로드
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: build/libs
        # 빌드 아티팩트 업로드

      - name: 도커허브 접속을 위해 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        # Docker Hub에 액세스 토큰으로 로그인

      - name: auth 서버 Docker 이미지 빌드 후 Docker Hub에 업로드
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/auth-server:latest -f auth/Dockerfile auth
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/auth-server:latest
        # auth 서버 Docker 이미지를 빌드하고 Docker Hub에 업로드

      - name: chat 서버 Docker 이미지 빌드 후 Docker Hub에 업로드
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/chat-server:latest -f chat/Dockerfile chat
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/chat-server:latest
        # chat 서버 Docker 이미지를 빌드하고 Docker Hub에 업로드

      - name: core 서버 Docker 이미지 빌드 후 Docker Hub에 업로드
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/core-server:latest -f core/Dockerfile core
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/core-server:latest
        # core 서버 Docker 이미지를 빌드하고 Docker Hub에 업로드

      - name: 변경 사항 GitHub에 푸시
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          git commit -m "빌드 아티팩트 업데이트"
          git push origin develop
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        # 빌드된 결과물을 GitHub에 푸시
